// Solution 1
export function formatString(input: string, toUpper: boolean = true): string {
  if (toUpper) {
    return input.toUpperCase()
  }

  return input.toLowerCase()
}

// Solution 2
type Books = { title: string; rating: number }[]

export function filterByRating(items: Books): Books {
  return items.filter(item => item.rating >= 4)
}

// Solution 3
export function concatenateArrays<T>(...arrays: T[][]): T[] {
  return arrays.reduce((acc, cur) => acc.concat(cur))
}

// Solution 4
export class Vehicle {
  constructor(private _make: string, private _year: number) {}

  getInfo(): string {
    return `Make: ${this._make}, Year: ${this._year}`
  }
}

export class Car extends Vehicle {
  constructor(make: string, year: number, private _model: string) {
    super(make, year)
  }

  getModel(): string {
    return `Model: ${this._model}`
  }
}




//
function formatString(input: string, toUpper?: boolean): string {
    return toUpper === false ? input.toLowerCase() : input.toUpperCase();
  }
  
  function filterByRating(
    items: { title: string; rating: number }[]
  ): { title: string; rating: number }[] {
    return items.filter((item) => item.rating >= 4);
  }
  
  function concatenateArrays<T>(...arrays: T[][]): T[] {
    const resultArr: T[] = [];
  
    arrays.forEach((subArray) => {
      subArray.forEach((element) => {
        resultArr[resultArr.length] = element;
      });
    });
  
    return resultArr;
  }
  
  class Vehicle {
    private _make: string;
    private _year: number;
  
    constructor(_make: string, _year: number) {
      this._make = _make;
      this._year = _year;
    }
  
    getInfo(): string {
      return `Make: ${this._make}, Year: ${this._year}`;
    }
  }
  
  class Car extends Vehicle {
    private _model: string;
  
    constructor(_make: string, _year: number, _model: string) {
      super(_make, _year);
      this._model = _model;
    }
  
    getModel(): string {
      return `Model: ${this._model}`;
    }
  }
  
  function processValue(value: string | number): number {
    if (typeof value === "string") {
      return value.length;
    } else {
      return value * 2;
    }
  }
  
  interface Product {
    name: string;
    price: number;
  }
  
  function getMostExpensiveProduct(products: Product[]): Product | null {
    if (products.length === 0) return null;
  
    let mostExpensive = products[0];
  
    for (let i = 1; i < products.length; i++) {
      if (products[i].price > mostExpensive.price) {
        mostExpensive = products[i];
      }
    }
  
    return mostExpensive;
  }
  
  enum Day {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
  }
  
  function getDayType(day: Day): string {
    return day === Day.Saturday || day === Day.Sunday ? "Weekend" : "Weekday";
  }
  
  async function squareAsync(n: number): Promise<number> {
    if (n < 0) throw new Error("Negative number not allowed");
  
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve(n * n);
      }, 1000);
    });
  }



  //
  {

    //==============> Problem 1 <==============//
     function formatString(input: string, toUpper?: boolean) : string {
      
        return  toUpper === true ? input.toUpperCase(): toUpper === false ? input.toLowerCase():input.toUpperCase();
    
    };

    const result1 = formatString("Hello");          // Output: "HELLO"
    const result2 =formatString("Hello", true);     // Output: "HELLO"
    const result3= formatString("Hello", false);    // Output: "hello"



    //==============> Problem 2 <==============//
     function filterByRating(items: {
        title: string;
        rating: number;
    }[]): {
        title: string;
        rating: number;
    }[]{

        return items.filter((item) => item.rating >= 4);
    };
    
    const books = [
    { title: "Book A", rating: 4.5 },
    { title: "Book B", rating: 3.2 },
    { title: "Book C", rating: 5.0 }
    ];

    filterByRating(books); 
    // Output: [ { title: "Book A", rating: 4.5 }, { title: "Book C", rating: 5.0 } ]


    //==============> Problem 3 <==============//

    // Pore korbo

    //==============> Problem 4 <==============//

      class Vehicle {
      public  make: string;
      public  year: number;

        constructor(make: string, year: number) {
            this.make = make;
            this.year = year;
        }

        getInfo() {
            return `Make: ${this.make}, Year: ${this.year}`
        }
    }
    

    class Car extends Vehicle {
        private model: string;

        constructor(make: string, year: number, model: string) {
            super(make, year);
            this.model = model;
        }

        getModel() {
            return `Model: ${this.model}`
        }
    }

    const myCar = new Car("Toyota", 2020, "Corolla");
    myCar.getInfo();   // Output: "Make: Toyota, Year: 2020"
    myCar.getModel();  // Output: "Model: Corolla"




    //==============> Problem 5 <==============//

      function processValue(value: string | number): number{
        return typeof value === "string" ? value?.length : value * 2;
    }

    processValue("hello");    // Output: 5
    processValue(10);         // Output: 20



//

function formatString(input: string, toUpper?: boolean): string {
    if (input && (toUpper || toUpper === undefined)) {
      return input.toUpperCase();
    }
    return input.toLowerCase();
  }
  
  function filterByRating(
    items: { title: string; rating: number }[]
  ): { title: string; rating: number }[] {
    return items.filter((item) => item.rating >= 4);
  }
  
  function concatenateArrays<T>(...arrays: T[][]): T[] {
    return arrays.flat();
  }
  
  class Vehicle {
    constructor(private make: string, public year: number) {}
    getInfo() {
      return `Make: ${this.make} , Year: ${this.year}`;
    }
  }
  
  class Car extends Vehicle {
    constructor(make: string, year: number, private model: string) {
      super(make, year);
    }
    getModel() {
      return `Model: ${this.model}`;
    }
  }
  
  function processValue(value: string | number): number {
    if (typeof value === "string") {
      return value.length;
    }
    return value * 2;
  }
  
  interface Product {
    name: string;
    price: number;
  }
  
  function getMostExpensiveProduct(products: Product[]): Product | null {
    console.log(products.length);
    if (products.length > 0) {
      console.log(products.length);
      let maxPrice: number = Math.max(...products.map((p) => p.price));
      return products.filter((p) => p.price === maxPrice)[0];
    }
    return null;
  }
  
  enum Day {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
  }
  
  function getDayType(day: Day): string {
    return day === Day.Saturday || day === Day.Sunday ? "Weekend" : "Weekday";
  }
  
  async function squareAsync(n: number): Promise<Number> {
    return new Promise((resolve, reject) => {
      if (n >= 0) {
        setTimeout(() => {
          resolve(n * n);
        }, 1000);
      } else {
        reject("Error: Negative number not allowed");
      }
    });
  }

  {
    const formatString = (input: string, toUpper?: boolean): string => {
      if (toUpper === undefined) {
        return input.toUpperCase();
      } else if (toUpper) {
        return input.toUpperCase();
      } else {
        return input.toLowerCase();
      }
    };
  
    const filterByRating = (
      items: { title: string; rating: number }[]
    ): {
      title: string;
      rating: number;
    }[] => {
      return items.filter((item) => item.rating >= 4);
    };
  
    const concatenateArrays = <T>(...arrays: T[][]): T[] => {
      return arrays.reduce((prev, curr) => prev.concat(curr));
    };
  
    class Vehicle {
      public make: string;
      public year: number;
  
      constructor(make: string, year: number) {
        this.make = make;
        this.year = year;
      }
  
      getInfo() {
        console.log(`Make: ${this.make}, Year: ${this.year}`);
      }
    }
  
    class Car extends Vehicle {
      private model: string;
  
      constructor(make: string, year: number, model: string) {
        super(make, year);
        this.model = model;
      }
  
      getModel() {
        console.log(`Model: ${this.model}`);
      }
    }
  
    const processValue = (value: string | number): number => {
      if (typeof value === "string") {
        return value.length;
      } else {
        return value * 2;
      }
    };
  
    interface Product {
      name: String;
      price: number;
    }
  
    const getMostExpensiveProduct = (products: Product[]): Product | null => {
      let max = products[0];
  
      for (let i = 0; i < products.length; i++) {
        if (products[i].price > max.price) {
          max = products[i];
        }
      }
  
      return max ?? null;
    };
  
    enum Day {
      Monday,
      Tuesday,
      Wednesday,
      Thursday,
      Friday,
      Saturday,
      Sunday,
    }
  
    const getDayType = (day: Day): string => {
      if (day === Day.Sunday) {
        return "Weekend";
      }
  
      return "Weekday";
    };
  
    const squareAsync = async (n: number): Promise<number> => {
      return new Promise<number>((resolve, reject) => {
        if (n >= 0) {
          resolve(n * n);
        } else {
          reject("Error: Negative number not allowed");
        }
      });
    };
  }





//
{
  const formatString = (input: string, toUpper?: boolean): string => {
    if (toUpper === undefined) {
      return input.toUpperCase();
    } else if (toUpper) {
      return input.toUpperCase();
    } else {
      return input.toLowerCase();
    }
  };

  const filterByRating = (
    items: { title: string; rating: number }[]
  ): {
    title: string;
    rating: number;
  }[] => {
    return items.filter((item) => item.rating >= 4);
  };

  const concatenateArrays = <T>(...arrays: T[][]): T[] => {
    return arrays.reduce((prev, curr) => prev.concat(curr));
  };

  class Vehicle {
    public make: string;
    public year: number;

    constructor(make: string, year: number) {
      this.make = make;
      this.year = year;
    }

    getInfo() {
      console.log(`Make: ${this.make}, Year: ${this.year}`);
    }
  }

  class Car extends Vehicle {
    private model: string;

    constructor(make: string, year: number, model: string) {
      super(make, year);
      this.model = model;
    }

    getModel() {
      console.log(`Model: ${this.model}`);
    }
  }

  const processValue = (value: string | number): number => {
    if (typeof value === "string") {
      return value.length;
    } else {
      return value * 2;
    }
  };

  interface Product {
    name: String;
    price: number;
  }

  const getMostExpensiveProduct = (products: Product[]): Product | null => {
    let max = products[0];

    for (let i = 0; i < products.length; i++) {
      if (products[i].price > max.price) {
        max = products[i];
      }
    }

    return max ?? null;
  };

  enum Day {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday,
    Saturday,
    Sunday,
  }

  const getDayType = (day: Day): string => {
    if (day === Day.Sunday) {
      return "Weekend";
    }

    return "Weekday";
  };

  const squareAsync = async (n: number): Promise<number> => {
    return new Promise<number>((resolve, reject) => {
      if (n >= 0) {
        resolve(n * n);
      } else {
        reject("Error: Negative number not allowed");
      }
    });
  };
}

//
{
  const formatString = (input: string, toUpperCase?: boolean): string => {
      if (toUpperCase === true || toUpperCase === undefined) {
          return input.toUpperCase()
      } else {
          return input.toLowerCase();
      }
  }

  console.log(formatString("Hello"))// Output: "HELLO"
  console.log(formatString("Hello", true));   // Output: "HELLO"
  console.log(formatString("Hello", false));  // Output: "hello"





  type Item = {
      title: string;
      rating: number;
  }

  const filterByRating = (items: Item[]): Item[] => {
      return items.filter(item => item.rating >= 4)
  }

  const books = [
      { title: "Book A", rating: 4.5 },
      { title: "Book B", rating: 3.2 },
      { title: "Book C", rating: 5.0 }
  ];

  console.log(filterByRating(books));
  // Output: [ { title: "Book A", rating: 4.5 }, { title: "Book C", rating: 5.0 } ]






  const concatenateArrays = <T>(...arrays: T[][]): T[] => {
      return arrays.reduce((previousValue: T[], currentValue: T[]) => previousValue.concat(currentValue), [])
  }

  console.log(concatenateArrays(["a", "b"], ["c"]));       // Output: ["a", "b", "c"]
  console.log(concatenateArrays([1, 2], [3, 4], [5]));     // Output: [1, 2, 3, 4, 5]





  class Vehicle {
      constructor(private make: string, public year: number) { }

      getInfo() {
          return `Make: ${this.make}, Year: ${this.year}`
      }
  }

  class Car extends Vehicle {
      constructor(make: string, year: number, private model: string) {
          super(make, year);
      }

      getModel() {
          return `Model: ${this.model}`
      }
  }

  const myCar = new Car("Toyota", 2020, "Corolla");
  console.log(myCar.getInfo());   // Output: "Make: Toyota, Year: 2020"
  console.log(myCar.getModel());  // Output: "Model: Corolla"








  const processValue = (value: string | number): number => {
      if (typeof value === "string") {
          return value.length
      } else {
          return value * 2;
      }
  }

  console.log(processValue("hello")); // Output: 5
  console.log(processValue(10)); // Output: 20







  interface Product {
      name: string;
      price: number;
  }

  const getMostExpensiveProduct = (products: Product[]): Product | null => {
      products.sort((a, b) => b.price - a.price);
      return products[0] || null;
  }

  const products = [
      { name: "Pen", price: 10 },
      { name: "Notebook", price: 25 },
      { name: "Bag", price: 50 }
  ];

  console.log(getMostExpensiveProduct(products));
  // Output: { name: "Bag", price: 50 }









  enum Day {
      Monday,
      Tuesday,
      Wednesday,
      Thursday,
      Friday,
      Saturday,
      Sunday
  }

  const getDayType = (day: Day): string => {
      if (day === 5 || day === 6) {
          return "Weekend"
      } else {
          return "Weekday"
      }
  }

  console.log(getDayType(Day.Monday));   // Output: "Weekday"
  console.log(getDayType(Day.Sunday));   // Output: "Weekend"


  const squareAsync = async (n: number): Promise<number> => {
      return new Promise((resolve, reject) => {
          if (n >= 0) {
              setTimeout(() => {
                  resolve(n * n)
              }, 1000)
          } else {
              reject("Error: Negative number not allowed")
          }
      })
  }


  squareAsync(4).then(console.log);        // Output after 1s: 16
  squareAsync(-3).catch(console.error);    // Output: Error: Negative number not allowed
}



















    //
}




//interface
// interface User {
//   name: string;
//   age: number;
// }



// interface User {
//   name: string;
// }

// interface User {
//   age: number;
// }

// // Result:
// // interface User { name: string; age: number; }



